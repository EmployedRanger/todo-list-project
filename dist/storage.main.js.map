{"version":3,"file":"storage.main.js","mappings":";;;;;;;;;;;;;;;AAAwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf,EAAE,sEAAY;AACd,iBAAiB,4DAAM;AACvB,kBAAkB,4DAAM;AACxB;AACA;AACA;AACA,IAAI;AACJ;AACA,8BAA8B;AAC9B,IAAI;AACJ;AACA;AACA;;;;;;;;;;;;;;;;;AC/CA;AACmC;AACF;AACN;;AAE3B;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,UAAU,kDAAQ;AAClB;AACA;;AAEA;AACA,gEAAgE,iDAAO;AACvE;;AAEA;AACA;AACA,2DAA2D,8CAAI;AAC/D;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;AC/EvB;AAC8C;AACb;AACN;;AAE3B,qHAAgD;AAChD,EAAE,8CAAI;AACN,CAAC;;AAEc;AACf;AACA;AACA;AACA,2BAA2B,iDAAO;AAClC,2BAA2B,iDAAO;AAClC,2BAA2B,iDAAO;AAClC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,gBAAgB,EAAE,kBAAkB;AAChE,mCAAmC,uBAAuB,EAAE,yBAAyB;;AAErF,6CAA6C,8CAAI;AACjD,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,iBAAiB,oBAAoB;AACjE,mCAAmC,wBAAwB,2BAA2B;AACtF,6CAA6C,8CAAI;AACjD,OAAO;AACP,KAAK;;AAEL;AACA,qEAAqE,oDAAU;AAC/E,QAAQ,oDAAM;AACd,QAAQ,oDAAM;AACd;AACA;AACA;AACA","sources":["webpack://todo-list-project/./node_modules/date-fns/esm/compareAsc/index.js","webpack://todo-list-project/./src/storage.js","webpack://todo-list-project/./src/todo-list.js"],"sourcesContent":["import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","/* eslint-disable no-console */\nimport TodoList from './todo-list';\nimport Project from './projects';\nimport Task from './tasks';\n\nconst Storage = {\n  saveList(data) {\n    localStorage.setItem('todoList', JSON.stringify(data));\n  },\n\n  getTodo() {\n    const todoList = Object.assign(\n      new TodoList(),\n      JSON.parse(localStorage.getItem('todoList')),\n    );\n\n    todoList.setProjects(\n      todoList.getProjects().map((project) => Object.assign(new Project(), project)),\n    );\n\n    todoList.getProjects().forEach((project) => {\n      project.setTasks(\n        project.getTasks().map((task) => Object.assign(new Task(), task)),\n      );\n    });\n\n    return todoList;\n  },\n\n  addProject(project) {\n    const todoList = Storage.getTodo();\n    todoList.addProject(project);\n    Storage.saveList(todoList);\n  },\n\n  deleteProject(projectName) {\n    const todoList = Storage.getTodo();\n    todoList.deleteProject(projectName);\n    Storage.saveList(todoList);\n  },\n\n  addTask(projectName, task) {\n    const todoList = Storage.getTodo();\n    todoList.getProject(projectName).addTask(task);\n    Storage.saveList(todoList);\n  },\n\n  deleteTask(projectName, taskName) {\n    const todoList = Storage.getTodo();\n    todoList.getProject(projectName).deleteTask(taskName);\n    Storage.saveList(todoList);\n  },\n\n  // renameTask(projectName, taskName, newTaskName) {\n  //   const todoList = Storage.getTodo();\n  //   todoList\n  //     .getProject(projectName)\n  //     .getTask(taskName)\n  //     .setName(newTaskName);\n  //   Storage.saveList(todoList);\n  // },\n\n  updateTodayProject() {\n    console.log('updateTodayProject in Storage ran');\n    const todoList = Storage.getTodo();\n    todoList.updateTodayProject();\n    Storage.saveList(todoList);\n  },\n\n  updateWeekProject() {\n    console.log('updateWeekProject in Storage ran');\n    const todoList = Storage.getTodo();\n    todoList.updateWeekProject();\n    Storage.saveList(todoList);\n  },\n};\n\n// const storage = Object.create(Storage);\n\nexport default Storage;\n","/* eslint-disable no-console */\nimport { compareAsc, toDate } from 'date-fns';\nimport Project from './projects';\nimport Task from './tasks';\n\nimport(/* webpackChunkName: \"task\" */ './tasks').then((taskModule) => {\n  Task = taskModule.default;\n});\n\nexport default class TodoList {\n  constructor() {\n    console.log('Constructor in TodoList ran');\n    this.projects = [];\n    this.projects.push(new Project('Current'));\n    this.projects.push(new Project('Today'));\n    this.projects.push(new Project('This week'));\n  }\n\n  setProjects(projects) {\n    this.projects = projects;\n  }\n\n  getProjects() {\n    return this.projects;\n  }\n\n  getProject(projectName) {\n    return this.getProjects.find((project) => project.getName() === projectName);\n  }\n\n  contains(projectName) {\n    return this.projects.some((project) => project.getName() === projectName);\n  }\n\n  addProject(newProject) {\n    if (this.projects.find((project) => project.name === newProject.name)) return;\n    this.projects.push(newProject);\n  }\n\n  deleteProject(projectName) {\n    const projectDeleted = this.projects.find(\n      (project) => project.getName() === projectName,\n    );\n    this.projects.splice(this.projects.indexOf(projectDeleted), 1);\n  }\n\n  updateTodayProject() {\n    this.getProject('Today').tasks = [];\n\n    this.projects.forEach((project) => {\n      if (project.getName() === 'Today' || project.getName() === 'This week') return;\n\n      const todayTasks = project.getDailyTasks();\n      todayTasks.forEach((task) => {\n        const taskName = `${task.getName()} ${project.getName()}`;\n        const taskDescription = `${task.getDescription()} ${project.getDescription()}`;\n\n        this.getProject('Today').addTask(new Task(taskName, taskDescription, task.getDate()));\n      });\n    });\n  }\n\n  updateWeekProject() {\n    this.getProject('This week').tasks = [];\n\n    this.projects.forEach((project) => {\n      if (project.getName() === 'This week' || project.getName() === 'Today') return;\n\n      const weekTasks = project.getWeeklyTasks();\n      weekTasks.forEach((task) => {\n        const taskName = `${task.getName()} {$(project.getName()})`;\n        const taskDescription = `${task.getDescription()} {$(project.getDescription()})`;\n        this.getProject('Today').addTask(new Task(taskName, taskDescription, task.getDate()));\n      });\n    });\n\n    this.getProject('This week').setTasks(\n      this.getProject('This week').getTasks().sort((task1, task2) => compareAsc(\n        toDate(new Date(task1.getDateFormatted())),\n        toDate(new Date(task2.getDateFormatted())),\n      )),\n    );\n  }\n}\n"],"names":[],"sourceRoot":""}